---
import Comments from '@/components/blogs/Comments'
import PostTags from '@/components/blogs/PostTags.astro'
import RelatedPosts from '@/components/blogs/RelatedPosts.astro'
import FormattedDate from '@/components/shared/FormattedDate.astro'
import { type Post } from '@/types'
import { Image } from 'astro:assets'

interface Props extends Post {}

const { id, title, category, publishedDate, updatedDate, heroImage, tags } =
  Astro.props
---

<div
  class='container mx-auto px-5 md:px-0 w-full md:w-10/12 lg:w-6/12 font-work'
>
  <div class='py-5'>
    <a href={`/category/${category}/`}>
      <div
        class='w-fit px-2.5 py-1 bg-accent hover:bg-accent/80 text-base-100 text-xs md:text-sm rounded-md mb-2 md:mb-4 font-bold uppercase'
      >
        {category}
      </div>
    </a>
    <h1
      class='text-base-content font-semibold text-xl md:text-2xl lg:text-5xl leading-5 md:leading-10'
    >
      {title}
    </h1>
    <div class='mt-3 md:mt-6 flex items-center gap-5 text-base-content/60'>
      <p class='text-xs md:text-sm'>
        {
          updatedDate && (
            <>
              Last updated on <FormattedDate date={updatedDate} />
            </>
          )
        }
        {
          !updatedDate && publishedDate && (
            <>
              Published on <FormattedDate date={publishedDate} />
            </>
          )
        }
      </p>
    </div>
  </div>
  <article class='prose lg:prose-xl mx-auto'>
    {
      heroImage && (
        <Image
          id='hero-image'
          width={720}
          height={360}
          src={heroImage}
          alt={title}
          class='rounded-xl border-b-8 border-accent'
        />
      )
    }
    <slot />
  </article>

  <RelatedPosts id={id} tags={tags} />

  <PostTags tags={tags} />

  <Comments client:idle />

  <div class='mt-10'>
    <a
      href='/blog'
      class='text-base-content/60 hover:text-base-content/80 transition-colors duration-200'
    >
      ‚Üê Back to blog
    </a>
  </div>
</div>

<script>
  import { $theme } from '@/stores/theme'

  $theme.subscribe((theme) => {
    const heroImage = document.getElementById('hero-image') as HTMLImageElement
    if (theme === 'light') {
      if (heroImage) {
        heroImage.src = heroImage.src.replace(/(\.[\w\d_-]+)$/i, '-light$1')
      }
    } else {
      if (heroImage) {
        heroImage.src = heroImage.src.replace(/-light(\.[\w\d_-]+)$/i, '$1')
      }
    }
  })

  const copyButtonLabel =
    '<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1"><path d="M8 10a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-8a2 2 0 0 1-2-2z"/><path d="M16 8V6a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h2"/></g></svg>'
  const codeBlocks = Array.from(document.querySelectorAll('pre'))

  for (const codeBlock of codeBlocks) {
    const wrapper = document.createElement('div')
    wrapper.style.position = 'relative'

    const copyButton = document.createElement('button') as HTMLButtonElement
    copyButton.className = 'copy-code'
    copyButton.innerHTML = copyButtonLabel

    codeBlock.setAttribute('tabindex', '0')
    codeBlock.appendChild(copyButton)

    // wrap codebock with relative parent element
    if (!codeBlock.parentNode) {
      continue
    }
    codeBlock.parentNode.insertBefore(wrapper, codeBlock)
    wrapper.appendChild(codeBlock)

    copyButton.addEventListener('click', async () => {
      await copyCode(codeBlock, copyButton)
    })
  }

  async function copyCode(block: HTMLPreElement, button: HTMLButtonElement) {
    const code = block.querySelector('code') as HTMLElement
    const text = code.innerText

    await navigator.clipboard.writeText(text)

    // visual feedback that task is completed
    button.innerHTML =
      '<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24"><path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="m5 12l5 5L20 7"/></svg>'

    setTimeout(() => {
      button.innerHTML = copyButtonLabel
    }, 700)
  }
</script>
